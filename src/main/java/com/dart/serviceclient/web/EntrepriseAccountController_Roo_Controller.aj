// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.dart.serviceclient.web;

import com.dart.serviceclient.domain.EntrepriseAccount;
import com.dart.serviceclient.domain.UserAccount;
import com.dart.serviceclient.service.EntrepriseService;
import com.dart.serviceclient.service.SecteurActiviteService;
import com.dart.serviceclient.service.UserService;
import com.dart.serviceclient.web.EntrepriseAccountController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect EntrepriseAccountController_Roo_Controller {
    
    @Autowired
    EntrepriseService EntrepriseAccountController.entrepriseService;
    
    @Autowired
    SecteurActiviteService EntrepriseAccountController.secteurActiviteService;
    
    @Autowired
    UserService EntrepriseAccountController.userService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String EntrepriseAccountController.create(@Valid EntrepriseAccount entrepriseAccount, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, entrepriseAccount);
            return "entrepriseaccounts/create";
        }
        uiModel.asMap().clear();
        entrepriseService.saveEntrepriseAccount(entrepriseAccount);
        return "redirect:/entrepriseaccounts/" + encodeUrlPathSegment(entrepriseAccount.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String EntrepriseAccountController.createForm(Model uiModel) {
        populateEditForm(uiModel, new EntrepriseAccount());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (userService.countAllUserAccounts() == 0) {
            dependencies.add(new String[] { "useraccount", "useraccounts" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "entrepriseaccounts/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String EntrepriseAccountController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("entrepriseaccount", entrepriseService.findEntrepriseAccount(id));
        uiModel.addAttribute("itemId", id);
        return "entrepriseaccounts/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String EntrepriseAccountController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("entrepriseaccounts", entrepriseService.findEntrepriseAccountEntries(firstResult, sizeNo));
            float nrOfPages = (float) entrepriseService.countAllEntrepriseAccounts() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("entrepriseaccounts", entrepriseService.findAllEntrepriseAccounts());
        }
        return "entrepriseaccounts/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String EntrepriseAccountController.update(@Valid EntrepriseAccount entrepriseAccount, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, entrepriseAccount);
            return "entrepriseaccounts/update";
        }
        uiModel.asMap().clear();
        entrepriseService.updateEntrepriseAccount(entrepriseAccount);
        return "redirect:/entrepriseaccounts/" + encodeUrlPathSegment(entrepriseAccount.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String EntrepriseAccountController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, entrepriseService.findEntrepriseAccount(id));
        return "entrepriseaccounts/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String EntrepriseAccountController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        EntrepriseAccount entrepriseAccount = entrepriseService.findEntrepriseAccount(id);
        entrepriseService.deleteEntrepriseAccount(entrepriseAccount);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/entrepriseaccounts";
    }
    
    void EntrepriseAccountController.populateEditForm(Model uiModel, EntrepriseAccount entrepriseAccount) {
        uiModel.addAttribute("entrepriseAccount", entrepriseAccount);
        uiModel.addAttribute("secteuractivites", secteurActiviteService.findAllSecteurActivites());
        uiModel.addAttribute("useraccounts", userService.findAllUserAccounts());
    }
    
    String EntrepriseAccountController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
